package com.atom.compiler.apt.aap

import java.io.IOException
import java.util.*
import javax.lang.model.element.Modifier

class AapMetas {

    val aapContext: AapContext
    val aapPacket = AapOptions.AAP_PACKET
    val aapModuleName: String

    constructor(aapContext: AapContext) {
        this.aapContext = aapContext
        this.aapModuleName = aapContext.moduleName
    }

    fun writeFile(apis: Set<AapMeta>) {
        // 生产指定名称的class类,可以继承或者实现某个或者某些接口
//        val pageConfigClassName: com.squareup.javapoet.ClassName =
//            com.squareup.javapoet.ClassName.get(metaModelPackage, metaModelName)
//
//        mContext.logger().warning("warning >>> " + pageConfigClassName.canonicalName())
//
//        val pageConfigBuilder: com.squareup.javapoet.TypeSpec.Builder =
//            com.squareup.javapoet.TypeSpec.classBuilder(pageConfigClassName)
//                .superclass(com.squareup.javapoet.ClassName.get(ApiImpls::class.java))
//
//        val format: String = mContext.dateformat().format(Date())
//        // 代码创建 文档
//        val javaDoc: com.squareup.javapoet.CodeBlock = com.squareup.javapoet.CodeBlock.builder()
//            .add("<p>This is a class automatically generated by API annotation processor, which is used to register the page automatically.</p>")
//            .add("\n")
//            .add("@date ").add(format)
//            .add("\n")
//            .build()
//        val GeneratedAnnountation: com.squareup.javapoet.AnnotationSpec =
//            com.squareup.javapoet.AnnotationSpec.builder(
//                AutoClass::class.java
//            )
//                .addMember("value", "\$S", ApiImplsProcessor::class.java.getName())
//                .addMember("date", "\$S", format)
//                .build()
//        val suppressWarningsAnnountation: com.squareup.javapoet.AnnotationSpec =
//            com.squareup.javapoet.AnnotationSpec.builder(
//                SuppressWarnings::class.java
//            )
//                .addMember("value", "\$S", "all")
//                .build()
//        val constructorBuilder: com.squareup.javapoet.MethodSpec.Builder =
//            com.squareup.javapoet.MethodSpec.constructorBuilder()
//                .addModifiers(Modifier.PUBLIC)
//        val iterator: Iterator<MetaApi> = apies.iterator()
//        while (iterator.hasNext()) {
//            val next: MetaApi = iterator.next()
//            val apiQualifiedName: String = next.getApiQualifiedName()
//            if (apiQualifiedName != null) {
//                val isHasApi: Boolean = mContext.hasApi(apiQualifiedName)
//                if (isHasApi) {
//                    continue
//                } else {
//                    mContext.putApi(apiQualifiedName)
//                }
//                val singleList: MutableList<SingleImpl> = ArrayList()
//                getImplNames(next, apies, singleList)
//                for (impl in singleList) {
//                    constructorBuilder.addStatement(
//                        "add(\$S , \$L.class , \$L.class , " + impl.version + ")",
//                        impl.name,
//                        impl.apiClass,
//                        impl.implClass
//                    )
//                }
//            }
//        }
//        val constructor: com.squareup.javapoet.MethodSpec = constructorBuilder.build()
//        pageConfigBuilder
//            .addJavadoc(javaDoc)
//            .addAnnotation(GeneratedAnnountation)
//            .addAnnotation(suppressWarningsAnnountation)
//            .addModifiers(Modifier.PUBLIC)
//            .addMethod(constructor)
//        val builder: com.squareup.javapoet.JavaFile.Builder =
//            com.squareup.javapoet.JavaFile.builder(metaModelPackage, pageConfigBuilder.build())
//        val build: com.squareup.javapoet.JavaFile = builder.build()
//        try {
//            build.writeTo(mContext.getFiler())
//        } catch (e: IOException) {
//            e.printStackTrace()
//        }
    }

    private fun getImplNames(
        api: AapMeta,
        impls: Collection<AapMeta>,
        result: MutableList<SingleImpl>
    ) {
//        val apiClassName: com.squareup.javapoet.ClassName =
//            com.squareup.javapoet.ClassName.get(api.getApiTypeElement())
//        for (metaApi in impls) {
//            if (!metaApi.isApiImpl(api.getApiQualifiedName())) {
//                continue
//            }
//            val implClassName: com.squareup.javapoet.ClassName =
//                com.squareup.javapoet.ClassName.get(metaApi.getImplTypeElement())
//            result.add(
//                SingleImpl(
//                    apiClassName,
//                    implClassName,
//                    metaApi.getImplAnnotationName(),
//                    metaApi.getImplAnnotationVersion()
//                )
//            )
//        }
    }

    internal class SingleImpl(
        apiClass: com.squareup.javapoet.ClassName,
        implClass: com.squareup.javapoet.ClassName,
        name: String,
        version: Long
    ) {
        var apiClass: com.squareup.javapoet.ClassName
        var implClass: com.squareup.javapoet.ClassName
        var name: String
        var version: Long

        init {
            this.apiClass = apiClass
            this.implClass = implClass
            this.name = name
            this.version = version
        }
    }
}